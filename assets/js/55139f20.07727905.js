"use strict";(self.webpackChunk_0_l_documentation=self.webpackChunk_0_l_documentation||[]).push([[9330],{7713:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var o=n(5893),i=n(1151);const r={title:"Getting Started",sidebar_position:1,description:"Libra Framework Tool Design"},a="Getting Started",s={id:"Tools/getting-started",title:"Getting Started",description:"Libra Framework Tool Design",source:"@site/docs/Tools/getting-started.md",sourceDirName:"Tools",slug:"/Tools/getting-started",permalink:"/Tools/getting-started",draft:!1,unlisted:!1,editUrl:"https://github.com/0LNetworkCommunity/documentation/edit/main/docs/Tools/getting-started.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Getting Started",sidebar_position:1,description:"Libra Framework Tool Design"},sidebar:"tutorialSidebar",previous:{title:"Tools",permalink:"/category/tools"},next:{title:"Txs",permalink:"/category/txs"}},l={},d=[{value:"About Libra Tool Design",id:"about-libra-tool-design",level:2},{value:"The Customer",id:"the-customer",level:3},{value:"Bring your own tool",id:"bring-your-own-tool",level:3},{value:"Start a new minimal Rust crate",id:"start-a-new-minimal-rust-crate",level:4},{value:"Build",id:"build",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"getting-started",children:"Getting Started"}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h2,{id:"about-libra-tool-design",children:"About Libra Tool Design"}),"\n",(0,o.jsx)(t.p,{children:"The tools are intended to be minimalist, yet modular. Upstream vendors have sophisticated and complex tooling. This is usually unwieldy for the profile of typical 0L users."}),"\n",(0,o.jsx)(t.h3,{id:"the-customer",children:"The Customer"}),"\n",(0,o.jsx)(t.p,{children:"If you have a typical end-user use case, Carpe will likely be all you need.\nThese tools are for users which are engaged in more admin level operations on the network: configuring and querying contracts."}),"\n",(0,o.jsx)(t.p,{children:"For that user the cli tools here will like have sufficient features: query, transact, run node."}),"\n",(0,o.jsx)(t.p,{children:"Similarly if you are a Move dev, similarly the most common features are covered: testing, verifying, compiling, deploying."}),"\n",(0,o.jsx)(t.h3,{id:"bring-your-own-tool",children:"Bring your own tool"}),"\n",(0,o.jsx)(t.p,{children:"If you have needs that aren't met with these tools, all of them are also exported as libraries. Meaning: they are architected so that they are easy to extend."}),"\n",(0,o.jsx)(t.h4,{id:"start-a-new-minimal-rust-crate",children:"Start a new minimal Rust crate"}),"\n",(0,o.jsxs)(t.p,{children:["With a simple Rust project, that uses Clap as a CLI scaffold, you can import all of the CLI types, whole or in part. This means you can extend the existing methods (by creating a ",(0,o.jsx)(t.code,{children:"trait"})," extension in your own tool)."]}),"\n",(0,o.jsxs)(t.p,{children:["Additionally the most relevant vendor SDK types are re-exported by ",(0,o.jsx)(t.code,{children:"libra-types"}),". So you should be able to take advantage of much of the Move resource parsing (e.g converting account addresses from API calls to structs);"]}),"\n",(0,o.jsx)(t.h3,{id:"build",children:"Build"}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["This targets an ubuntu 22.04 build. You may need to create an account. Do it ",(0,o.jsx)(t.a,{href:"/tools/wallet",children:"here"})]})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"#build dependencies\nsudo apt update\nsudo apt install -y git tmux jq build-essential cmake clang llvm libgmp-dev pkg-config libssl-dev lld libpq-dev\n\n#install rust\ncurl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y\n\n#restart your bash instance to pickup the cargo paths\n. ~/.bashrc\n\n#clone the repo\ngit clone https://github.com/0LNetworkCommunity/libra-framework.git\ncd ~/libra-framework\ngit fetch --all && git checkout main\n\n#build\ncargo build --release -p libra \n\n\n#make global and persistant. this assumes the `libra` binary is already built and located at `~/libra-framework/target/release/libra`.\necho 'export PATH=\"$HOME/libra-framework/target/release:$PATH\"' >> ~/.bashrc\nsource ~/.bashrc\n\n#verification\nlibra --version \n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>a});var o=n(7294);const i={},r=o.createContext(i);function a(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);