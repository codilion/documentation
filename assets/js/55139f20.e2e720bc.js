"use strict";(self.webpackChunk_0_l_documentation=self.webpackChunk_0_l_documentation||[]).push([[9330],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(r),m=o,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return r?n.createElement(g,i(i({ref:t},c),{},{components:r})):n.createElement(g,i({ref:t},c))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5484:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const a={title:"Getting Started",sidebar_position:1,description:"Libra Framework Tool Design"},i="Getting Started",l={unversionedId:"Tools/getting-started",id:"Tools/getting-started",title:"Getting Started",description:"Libra Framework Tool Design",source:"@site/docs/Tools/getting-started.md",sourceDirName:"Tools",slug:"/Tools/getting-started",permalink:"/Tools/getting-started",draft:!1,editUrl:"https://github.com/0LNetworkCommunity/documentation/edit/main/docs/Tools/getting-started.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Getting Started",sidebar_position:1,description:"Libra Framework Tool Design"},sidebar:"tutorialSidebar",previous:{title:"Tools",permalink:"/category/tools"},next:{title:"Txs",permalink:"/category/txs"}},s={},u=[{value:"About Libra Tool Design",id:"about-libra-tool-design",level:2},{value:"The Customer",id:"the-customer",level:3},{value:"Bring your own tool",id:"bring-your-own-tool",level:3},{value:"Start a new minimal Rust crate",id:"start-a-new-minimal-rust-crate",level:4},{value:"Build",id:"build",level:3}],c={toc:u},d="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getting-started"},"Getting Started"),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"about-libra-tool-design"},"About Libra Tool Design"),(0,o.kt)("p",null,"The tools are intended to be minimalist, yet modular. Upstream vendors have sophisticated and complex tooling. This is usually unwieldy for the profile of typical 0L users."),(0,o.kt)("h3",{id:"the-customer"},"The Customer"),(0,o.kt)("p",null,"If you have a typical end-user use case, Carpe will likely be all you need.\nThese tools are for users which are engaged in more admin level operations on the network: configuring and querying contracts."),(0,o.kt)("p",null,"For that user the cli tools here will like have sufficient features: query, transact, run node."),(0,o.kt)("p",null,"Similarly if you are a Move dev, similarly the most common features are covered: testing, verifying, compiling, deploying."),(0,o.kt)("h3",{id:"bring-your-own-tool"},"Bring your own tool"),(0,o.kt)("p",null,"If you have needs that aren't met with these tools, all of them are also exported as libraries. Meaning: they are architected so that they are easy to extend."),(0,o.kt)("h4",{id:"start-a-new-minimal-rust-crate"},"Start a new minimal Rust crate"),(0,o.kt)("p",null,"With a simple Rust project, that uses Clap as a CLI scaffold, you can import all of the CLI types, whole or in part. This means you can extend the existing methods (by creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"trait")," extension in your own tool)."),(0,o.kt)("p",null,"Additionally the most relevant vendor SDK types are re-exported by ",(0,o.kt)("inlineCode",{parentName:"p"},"libra-types"),". So you should be able to take advantage of much of the Move resource parsing (e.g converting account addresses from API calls to structs);"),(0,o.kt)("h3",{id:"build"},"Build"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"This targets an ubuntu 22.04 build. You may need to create an account. Do it ",(0,o.kt)("a",{parentName:"p",href:"/tools/wallet"},"here"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#build dependencies\nsudo apt update\nsudo apt install -y git tmux jq build-essential cmake clang llvm libgmp-dev pkg-config libssl-dev lld libpq-dev\n\n#install rust\ncurl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y\n\n#restart your bash instance to pickup the cargo paths\n. ~/.bashrc\n\n#clone the repo\ngit clone https://github.com/0LNetworkCommunity/libra-framework.git\ncd ~/libra-framework\ngit fetch --all && git checkout main\n\n#build\ncargo build --release -p libra \n\n\n#make global and persistant. this assumes the `libra` binary is already built and located at `~/libra-framework/target/release/libra`.\necho 'export PATH=\"$HOME/libra-framework/target/release:$PATH\"' >> ~/.bashrc\nsource ~/.bashrc\n\n#verification\nlibra --version \n")))}p.isMDXComponent=!0}}]);