"use strict";(self.webpackChunk_0_l_documentation=self.webpackChunk_0_l_documentation||[]).push([[6183],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),f=o,m=u["".concat(s,".").concat(f)]||u[f]||p[f]||a;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3951:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_label:"View",sidebar_position:7,description:"Access pre-defined view methods"},i="View",l={unversionedId:"Tools/query/view",id:"Tools/query/view",title:"View",description:"Access pre-defined view methods",source:"@site/docs/Tools/query/view.md",sourceDirName:"Tools/query",slug:"/Tools/query/view",permalink:"/Tools/query/view",draft:!1,editUrl:"https://github.com/0LNetworkCommunity/documentation/edit/main/docs/Tools/query/view.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_label:"View",sidebar_position:7,description:"Access pre-defined view methods"},sidebar:"tutorialSidebar",previous:{title:"Resources",permalink:"/Tools/query/resources"},next:{title:"Wallet",permalink:"/Tools/wallet"}},s={},c=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"view"},"View"),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,"Throughout the codebase, there are many public methods with the ",(0,o.kt)("inlineCode",{parentName:"p"},"#[view]")," attribute. These methods are meant to retrieve various states and network values that are not related to a specific account (or at least not nessecerily)."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"query view")," command allows you to invoke those methods from the command line, including the passing of required params when needed."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"libra query view [OPTIONS] --function-id <FUNCTION_ID>\n\nOptions:\n  -f, --function-id <FUNCTION_ID>  Function identifier has the form <ADDRESS>::<MODULE_ID>::<FUNCTION_NAME>\n                                   \n                                   Example:\n                                   0x1::coin::balance\n                                   \n  -t, --type-args <TYPE_ARGS>      Type arguments separated by commas\n                                   \n                                   Example:\n                                   'u8, u16, u32, u64, u128, u256, bool, address, vector<u8>, signer'\n                                   \n  -a, --args <ARGS>                Function arguments separated by commas\n                                   \n                                   Example:\n                                   '0x1, true, 12, 24_u8, x\"123456\"'\n                                   \n  -h, --help                       Print help\n\n")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("admonition",{title:"View invocation format",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Note that the examples are querying the canonical system resource at ",(0,o.kt)("inlineCode",{parentName:"p"},"0x1"),", however, other view methods can be queried in the same way, following the ",(0,o.kt)("inlineCode",{parentName:"p"},"RESOURCE_ADDRESS::MODULE_NAME::FUNCTION_NAME")," pattern")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# Get the total suppply of the GAS coin\n# This will call the method with the following signature\n#\n# #[view]\n# public fun supply<CoinType>(): Option<u128> acquires CoinInfo {...}\n\nlibra query view --function-id 0x1::gas_coin::supply\n\n{\n  "body": [\n    "99999999355972010"\n  ]\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# Get validators votes for network upgrade proposal #2. First `Yes` vote count, then `No` vote count\n\n# This will call the method with the following signature (note the expected `proposal_id` argument that is passed with the --args flag)\n# #[view]\n# public fun get_votes(proposal_id: u64) {...}\n\nlibra query view --function-id 0x1::diem_governance::get_votes --args 2\n\n{\n  "body": [\n    "10",\n    "0"\n  ]\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# Get the list of validators that vouched for an account\n\n# This will call the method with the following signature (note the expected `proposal_id` argument that is passed with the --args flag)\n# #[view]\n# public fun all_vouchers(val: address): vector<address> acquires MyVouches {...}\n\nlibra query view --function-id 0x1::vouch::all_vouchers --args 0xd1281de242839fc939745996882c5fc2\n\n{\n  "body": [\n    [\n      "0xebbd5fb7042a7021dd71e3f6bddd55f3",\n      "0xd3ad1f9682d57d562efd23924aa8aaaf4c0410df5b1a9ff3e4b1efa04273f5b9",\n      "0x32f24e0488a4e189d38fccd1f2a94b53",\n      "0x3d3763dd90531da4fa264b4b76c9c5a76435c9b3eed2699b1f79bda28d23c42e",\n      "0x304a03c0b4acdfdce54bfaf39d4e0448",\n      "0xd67f3ff22bd719eb5be2df6577c9b42d",\n      "0xc208c09ecb52d626ef037c2011ba2d7b18f999eee5be54ac8161627613500c93"\n    ]\n  ]\n}\n')))}p.isMDXComponent=!0}}]);