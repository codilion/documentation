"use strict";(self.webpackChunk_0_l_documentation=self.webpackChunk_0_l_documentation||[]).push([[3543],{6211:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});var a=i(5893),o=i(1151);const r={title:"VFN Setup",sidebar_label:"VFN",sidebar_position:7},l=void 0,t={id:"validators/vfn-setup",title:"VFN Setup",description:"VFN Setup",source:"@site/docs/validators/vfn-setup.md",sourceDirName:"validators",slug:"/validators/vfn-setup",permalink:"/validators/vfn-setup",draft:!1,unlisted:!1,editUrl:"https://github.com/0LNetworkCommunity/documentation/edit/main/docs/validators/vfn-setup.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"VFN Setup",sidebar_label:"VFN",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Post-Genesis Ceremony Registration",permalink:"/validators/register"},next:{title:"Hot Upgrades",permalink:"/validators/hot-upgrades"}},s={},d=[{value:"VFN Setup",id:"vfn-setup",level:2},{value:"0L Network VFN Setup &amp; Public Static Peer ID",id:"0l-network-vfn-setup--public-static-peer-id",level:3},{value:"VFN initialization",id:"vfn-initialization",level:4},{value:"Validator Configuration (on your Validator machine)",id:"validator-configuration-on-your-validator-machine",level:4},{value:"VFN Configuration (on your VFN machine)",id:"vfn-configuration-on-your-vfn-machine",level:4},{value:"On-Chain Configuration",id:"on-chain-configuration",level:4}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"vfn-setup",children:"VFN Setup"}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsx)(n.p,{children:"We strongly suggest that all validators also run a VFN, which is a node that serves as a crucial counterpart to completing the design of our network. The VFN is how the public network is able to reach the validator, which should not be done directly."})}),"\n",(0,a.jsx)(n.h3,{id:"0l-network-vfn-setup--public-static-peer-id",children:"0L Network VFN Setup & Public Static Peer ID"}),"\n",(0,a.jsx)(n.p,{children:"Clone the libra-framework and build:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd ~\ngit clone https://github.com/0LNetworkCommunity/libra-framework\n\ncd ~/libra-framework\nbash ./util/dev_setup.sh -t\n\n# build and install the binary\ncd ~/libra-framework\ncargo build --release -p libra -p diem-db-tool -p diem\n"})}),"\n",(0,a.jsx)(n.p,{children:"Make sure your path to libra is global and is persistent:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"sudo cp -f ~/libra-framework/target/release/libra* ~/.cargo/bin/\n"})}),"\n",(0,a.jsx)(n.h4,{id:"vfn-initialization",children:"VFN initialization"}),"\n",(0,a.jsxs)(n.p,{children:["Grab the genesis blob and waypoint (creates ",(0,a.jsx)(n.code,{children:"fullnode.yaml"}),", not used here)"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"libra config fullnode-init\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Set your client ",(0,a.jsx)(n.code,{children:"libra.yaml"})," with the rpc-load-balancer upstream node"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"libra config fix --force-url https://testnet-rpc.openlibra.space:8080\n"})}),"\n",(0,a.jsx)(n.p,{children:"Configure your VFN using the validator's configs"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"libra config validator-init\n"})}),"\n",(0,a.jsx)(n.p,{children:"Prepare a new VFN config by starting with the validator's config (until we build a CLI tool for this)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cp ~/.libra/validator.yaml ~/.libra/vfn.yaml\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Remove the ",(0,a.jsx)(n.code,{children:"consensus"})," and ",(0,a.jsx)(n.code,{children:"validator_network"})," sections from the VFN yaml"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"nano ~/.libra/vfn.yaml\n"})}),"\n",(0,a.jsx)(n.h4,{id:"validator-configuration-on-your-validator-machine",children:"Validator Configuration (on your Validator machine)"}),"\n",(0,a.jsx)(n.p,{children:"Add the VFN network to your validator's config if not done so already"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"nano ~/.libra/validator.yaml\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This is what your ",(0,a.jsx)(n.code,{children:"full_node_networks"})," section should look like"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"full_node_networks:\n- network_id:\n    private: 'vfn'\n  listen_address: '/ip4/0.0.0.0/tcp/6181'\n  identity:\n    type: 'from_file'\n    path: '/home/vnuser/.libra/validator-identity.yaml'\n"})}),"\n",(0,a.jsx)(n.h4,{id:"vfn-configuration-on-your-vfn-machine",children:"VFN Configuration (on your VFN machine)"}),"\n",(0,a.jsx)(n.p,{children:"Grab your validator's connection string (ip with replaced port and public key)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"libra query val-config -a 0xabc4321yourvalidatoraccount | jq .validator_network_addresses | sed 's#/6180/#/6181/#g'\n"})}),"\n",(0,a.jsx)(n.p,{children:"Make sure the public key matches your validator's public key on file"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"grep validator_network_public_key ~/.libra/operator.yaml\n"})}),"\n",(0,a.jsx)(n.p,{children:"Update the VFN networks"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"nano ~/.libra/vfn.yaml\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This is what your ",(0,a.jsx)(n.code,{children:"full_node_networks"})," section should look like (you ",(0,a.jsx)(n.code,{children:"6181"})," and ",(0,a.jsx)(n.code,{children:"6182"}),")"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"full_node_networks:\n- network_id:\n    private: 'vfn'\n  discovery_method: 'onchain'\n  listen_address: '/ip4/0.0.0.0/tcp/6181'\n  seeds:\n    1234yourvalidatorpublickey:\n      addresses:\n      - '/ip4/<validator_ip>/tcp/6181/noise-ik/0x1234yourvalidatorpublickey/handshake/0'\n      role: 'Validator'\n- network_id: 'public'\n  discovery_method: 'onchain'\n  listen_address: '/ip4/0.0.0.0/tcp/6182'\n  identity:\n    type: 'from_file'\n    path: '/home/vfnuser/.libra/validator-full-node-identity.yaml'\n"})}),"\n",(0,a.jsx)(n.p,{children:"Note:\nYour VFN will use your validator as an upstream without an identity, while the public network will use the identity file."}),"\n",(0,a.jsx)(n.h4,{id:"on-chain-configuration",children:"On-Chain Configuration"}),"\n",(0,a.jsxs)(n.p,{children:["Take note of your ",(0,a.jsx)(n.code,{children:"full_node_network_public_key"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'grep full_node_network_public_key ~/.libra/public-keys.yaml\n\n# example: full_node_network_public_key: "0xabcdyourvfnpublickey"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Now you should update your ",(0,a.jsx)(n.code,{children:"operator.yaml"})," with the VFN's public key and ip address"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"nano ~/.libra/operator.yaml\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This is what the ",(0,a.jsx)(n.code,{children:"full_node_*"})," section of ",(0,a.jsx)(n.code,{children:"operator.yaml"})," should look like"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'full_node_network_public_key: "0xabcdyourvfnpublickey"\nfull_node_host:\n  host: <vfn_ip>\n  port: 6181\n'})}),"\n",(0,a.jsx)(n.p,{children:"Update the on-chain config for the VN/VFN (only needed to be done once)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"libra txs validator update\n\nEnter your 0L mnemonic:\n\ud83d\udd11\ntransaction success  \xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7 \u2713\n"})}),"\n",(0,a.jsx)(n.p,{children:"Wait an epoch and then check the on-chain values to confirm"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"libra query val-config -a 0xabc4321yourvalidatoraccount | jq\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>t,a:()=>l});var a=i(7294);const o={},r=a.createContext(o);function l(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);