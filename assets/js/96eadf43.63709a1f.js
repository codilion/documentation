"use strict";(self.webpackChunk_0_l_documentation=self.webpackChunk_0_l_documentation||[]).push([[5989],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),p=a,g=u["".concat(i,".").concat(p)]||u[p]||m[p]||o;return n?r.createElement(g,s(s({ref:t},d),{},{components:n})):r.createElement(g,s({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5410:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_label:"Deploy",sidebar_position:2,description:"Deploy Move smart contracts on 0L Network"},s="Deploy a Hello OL Contract",l={unversionedId:"developers/deploy",id:"developers/deploy",title:"Deploy a Hello OL Contract",description:"Deploy Move smart contracts on 0L Network",source:"@site/docs/developers/deploy.md",sourceDirName:"developers",slug:"/developers/deploy",permalink:"/developers/deploy",draft:!1,editUrl:"https://github.com/0LNetworkCommunity/documentation/edit/main/docs/developers/deploy.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Deploy",sidebar_position:2,description:"Deploy Move smart contracts on 0L Network"},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/developers/getting-started"}},i={},c=[{value:"High Level Steps",id:"high-level-steps",level:4},{value:"1. Write the Contract and Tests",id:"1-write-the-contract-and-tests",level:3},{value:"Directory Structure",id:"directory-structure",level:5},{value:"hello_0L.move",id:"hello_0lmove",level:5},{value:"hello_0L_test.move",id:"hello_0l_testmove",level:5},{value:"2. Create a TOML file",id:"2-create-a-toml-file",level:3},{value:"Move.toml",id:"movetoml",level:5},{value:"3. Compile",id:"3-compile",level:3},{value:"Output",id:"output",level:5},{value:"4. Test",id:"4-test",level:3},{value:"Output",id:"output-1",level:5},{value:"5. Publish",id:"5-publish",level:3},{value:"Output",id:"output-2",level:5},{value:"6. Interact",id:"6-interact",level:3},{value:"Interacting with functions",id:"interacting-with-functions",level:4},{value:"Interacting with view functions",id:"interacting-with-view-functions",level:4}],d={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deploy-a-hello-ol-contract"},"Deploy a Hello OL Contract"),(0,a.kt)("h4",{id:"high-level-steps"},"High Level Steps"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Write the Contract and Tests"),(0,a.kt)("li",{parentName:"ol"},"Create a TOML file"),(0,a.kt)("li",{parentName:"ol"},"Compile"),(0,a.kt)("li",{parentName:"ol"},"Test"),(0,a.kt)("li",{parentName:"ol"},"Publish"),(0,a.kt)("li",{parentName:"ol"},"Interact")),(0,a.kt)("h3",{id:"1-write-the-contract-and-tests"},"1. Write the Contract and Tests"),(0,a.kt)("p",null,"Create the Hello OL smart contract"),(0,a.kt)("h5",{id:"directory-structure"},"Directory Structure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"hello_0L\n    |\n    \u251c\u2500\u2500 Move.toml\n    \u2514\u2500\u2500 sources\n        \u2514\u2500\u2500 hello_0L.move\n        \u2514\u2500\u2500 hello_0L_test.move\n")),(0,a.kt)("h5",{id:"hello_0lmove"},"hello_0L.move"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'module hello_0L::message {\n    use std::error;\n    use std::signer;\n    use std::string;\n    use diem_framework::account;\n    use diem_framework::event;\n\n//:!:>resource\n    struct MessageHolder has key {\n        message: string::String,\n        message_change_events: event::EventHandle<MessageChangeEvent>,\n    }\n//<:!:resource\n\n    struct MessageChangeEvent has drop, store {\n        from_message: string::String,\n        to_message: string::String,\n    }\n\n    /// There is no message present\n    const ENO_MESSAGE: u64 = 0;\n\n    #[view]\n    public fun get_message(addr: address): string::String acquires MessageHolder {\n        assert!(exists<MessageHolder>(addr), error::not_found(ENO_MESSAGE));\n        borrow_global<MessageHolder>(addr).message\n    }\n\n    public entry fun set_message(account: signer, message: string::String)\n    acquires MessageHolder {\n        let account_addr = signer::address_of(&account);\n        if (!exists<MessageHolder>(account_addr)) {\n            move_to(&account, MessageHolder {\n                message,\n                message_change_events: account::new_event_handle<MessageChangeEvent>(&account),\n            })\n        } else {\n            let old_message_holder = borrow_global_mut<MessageHolder>(account_addr);\n            let from_message = old_message_holder.message;\n            event::emit_event(&mut old_message_holder.message_change_events, MessageChangeEvent {\n                from_message,\n                to_message: copy message,\n            });\n            old_message_holder.message = message;\n        }\n    }\n\n    #[test(account = @0x1)]\n    public entry fun sender_can_set_message(account: signer) acquires MessageHolder {\n        let addr = signer::address_of(&account);\n        diem_framework::account::create_account_for_test(addr);\n        set_message(account,  string::utf8(b"Hello, Blockchain"));\n\n        assert!(\n          get_message(addr) == string::utf8(b"Hello, Blockchain"),\n          ENO_MESSAGE\n        );\n    }\n')),(0,a.kt)("h5",{id:"hello_0l_testmove"},"hello_0L_test.move"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'#[test_only]\nmodule hello_0L::message_tests {\n    use std::signer;\n    use std::unit_test;\n    use std::vector;\n    use std::string;\n\n    use hello_0L::message;\n\n    fun get_account(): signer {\n        vector::pop_back(&mut unit_test::create_signers_for_testing(1))\n    }\n\n    #[test]\n    public entry fun sender_can_set_message() {\n        let account = get_account();\n        let addr = signer::address_of(&account);\n        diem_framework::account::create_account_for_test(addr);\n        message::set_message(account,  string::utf8(b"Hello, Blockchain"));\n\n        assert!(\n          message::get_message(addr) == string::utf8(b"Hello, Blockchain"),\n          0\n        );\n    }\n}\n')),(0,a.kt)("h3",{id:"2-create-a-toml-file"},"2. Create a TOML file"),(0,a.kt)("h5",{id:"movetoml"},"Move.toml"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"Named addresses:"),"\nYour module needs to be deployed at an address. You can hard-code the address in the Move.toml file. Or you can have the address variable (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"hello_0L"),"), defined at publishing time. In either case the address MUST MATCH THE ADDRESS OF THE SIGNER that is publishing.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[package]\nname = 'message'\nversion = '1.0.0'\n\n# [addresses]\n# hello_0L = \"_\"\n\n[dependencies.DiemFramework]\ngit = 'https://github.com/0LNetworkCommunity/diem.git'\nrev = 'release'\nsubdir = 'diem-move/framework/diem-framework'\n")),(0,a.kt)("h3",{id:"3-compile"},"3. Compile"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'libra move compile --package-dir path/to/your/hello_0L_contract\n\n#Example\nlibra move compile --package-dir ~/hello_0L --named-addresses "hello_0L=0xd1281de242839fc939745996882c5fc2" \n')),(0,a.kt)("h5",{id:"output"},"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Compiling, may take a little while to download git dependencies...\nUPDATING GIT DEPENDENCY https://github.com/0LNetworkCommunity/diem.git\nINCLUDING DEPENDENCY DiemFramework\nINCLUDING DEPENDENCY DiemStdlib\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING test_publish\npackage size 819 bytes\ntransaction success  \xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7 \u2713\n")),(0,a.kt)("h3",{id:"4-test"},"4. Test"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'libra move test --package-dir path/to/your/hello_0L_contract\n\n# Example\nlibra move test --package-dir ~/hello_0L --named-addresses "hello_0L=0xd1281de242839fc939745996882c5fc2"\n')),(0,a.kt)("h5",{id:"output-1"},"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"INCLUDING DEPENDENCY DiemFramework\nINCLUDING DEPENDENCY DiemStdlib\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING message\nRunning Move unit tests\n[ PASS    ] 0xd1281de242839fc939745996882c5fc2::message_tests::sender_can_set_message\n[ PASS    ] 0xd1281de242839fc939745996882c5fc2::message::sender_can_set_message\nTest result: OK. Total tests: 2; passed: 2; failed: 0\n")),(0,a.kt)("h3",{id:"5-publish"},"5. Publish"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"txs publish")," will compile the package before submitting.\nYou should test and compile the code before running, but it is not necessary for publishing.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'libra txs publish --package-dir path/to/your/hello_0L_contract  \n\n#Example\nlibra txs publish --package-dir ~/hello_0L --named-addresses "hello_0L=0xc208c09ecb52d626ef037c2011ba2d7b18f999eee5be54ac8161627613500c93" \n')),(0,a.kt)("h5",{id:"output-2"},"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Compiling, may take a little while to download git dependencies...\nUPDATING GIT DEPENDENCY https://github.com/0LNetworkCommunity/diem.git\nINCLUDING DEPENDENCY DiemFramework\nINCLUDING DEPENDENCY DiemStdlib\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING message\npackage size 1136 bytes\ntransaction success  \xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7 \u2713\n")),(0,a.kt)("h3",{id:"6-interact"},"6. Interact"),(0,a.kt)("h4",{id:"interacting-with-functions"},"Interacting with functions"),(0,a.kt)("p",null,"You can interact with your new smart contract with the ",(0,a.kt)("inlineCode",{parentName:"p"},"generate_transaction")," subcommand of the ",(0,a.kt)("inlineCode",{parentName:"p"},"txs")," tool"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"libra txs generate-transaction --function-id address::module::function\n\n# Example\nlibra txs generate-transaction --function-id 0xc208c09ecb52d626ef037c2011ba2d7b18f999eee5be54ac8161627613500c93::message::set_message --args 'b\"hello\"'\n")),(0,a.kt)("h4",{id:"interacting-with-view-functions"},"Interacting with view functions"),(0,a.kt)("p",null,"To view the changes you have made use the ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," subcommand of the ",(0,a.kt)("inlineCode",{parentName:"p"},"query")," tool"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"libra query resource --account <ACC> --resource-path-string address::module::struct\n\n# Example\nlibra query resource --account 0xc208c09ecb52d626ef037c2011ba2d7b18f999eee5be54ac8161627613500c93 --resource-path-string 0xc208c09ecb52d626ef037c2011ba2d7b18f999eee5be54ac8161627613500c93::message::MessageHolder\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Be sure to check out Move code examples for various types of Smart Contracts ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/0LNetworkCommunity/diem/tree/release/diem-move/move-examples"},"here"))))}m.isMDXComponent=!0}}]);